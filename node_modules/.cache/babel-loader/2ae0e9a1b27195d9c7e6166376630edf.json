{"ast":null,"code":"export default function (o, digits) {\n  if (!(0 <= (digits = +digits) && digits <= 20)) throw new Error(\"invalid digits\");\n  function quantizePoint(coordinates) {\n    coordinates[0] = +coordinates[0].toFixed(digits);\n    coordinates[1] = +coordinates[1].toFixed(digits);\n  }\n  function quantizePoints(coordinates) {\n    coordinates.forEach(quantizePoint);\n  }\n  function quantizePolygon(coordinates) {\n    coordinates.forEach(quantizePoints);\n  }\n  function quantizeGeometry(o) {\n    if (o) switch (o.type) {\n      case \"GeometryCollection\":\n        o.geometries.forEach(quantizeGeometry);\n        break;\n      case \"Point\":\n        quantizePoint(o.coordinates);\n        break;\n      case \"MultiPoint\":\n      case \"LineString\":\n        quantizePoints(o.coordinates);\n        break;\n      case \"MultiLineString\":\n      case \"Polygon\":\n        quantizePolygon(o.coordinates);\n        break;\n      case \"MultiPolygon\":\n        o.coordinates.forEach(quantizePolygon);\n        break;\n      default:\n        return;\n    }\n  }\n  function quantizeFeature(o) {\n    quantizeGeometry(o.geometry);\n  }\n  if (o) switch (o.type) {\n    case \"Feature\":\n      quantizeFeature(o);\n      break;\n    case \"FeatureCollection\":\n      o.features.forEach(quantizeFeature);\n      break;\n    default:\n      quantizeGeometry(o);\n      break;\n  }\n  return o;\n}","map":null,"metadata":{},"sourceType":"module"}