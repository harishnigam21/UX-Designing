{"ast":null,"code":"var _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n  return target;\n};\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n  return target;\n}\nimport { createElement } from 'react';\nimport PropTypes from 'prop-types';\nvar Target = function Target(props, context) {\n  var _props$component = props.component,\n    component = _props$component === undefined ? 'div' : _props$component,\n    innerRef = props.innerRef,\n    children = props.children,\n    restProps = _objectWithoutProperties(props, ['component', 'innerRef', 'children']);\n  var popperManager = context.popperManager;\n  var targetRef = function targetRef(node) {\n    popperManager.setTargetNode(node);\n    if (typeof innerRef === 'function') {\n      innerRef(node);\n    }\n  };\n  if (typeof children === 'function') {\n    var targetProps = {\n      ref: targetRef\n    };\n    return children({\n      targetProps: targetProps,\n      restProps: restProps\n    });\n  }\n  var componentProps = _extends({}, restProps);\n  if (typeof component === 'string') {\n    componentProps.ref = targetRef;\n  } else {\n    componentProps.innerRef = targetRef;\n  }\n  return createElement(component, componentProps, children);\n};\nTarget.contextTypes = {\n  popperManager: PropTypes.object.isRequired\n};\nTarget.propTypes = {\n  component: PropTypes.oneOfType([PropTypes.node, PropTypes.func]),\n  innerRef: PropTypes.func,\n  children: PropTypes.oneOfType([PropTypes.node, PropTypes.func])\n};\nexport default Target;","map":null,"metadata":{},"sourceType":"module"}