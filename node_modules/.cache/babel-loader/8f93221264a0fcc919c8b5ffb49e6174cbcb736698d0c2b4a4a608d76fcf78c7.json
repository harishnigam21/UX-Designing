{"ast":null,"code":"'use strict';\n\nfunction _interopDefault(ex) {\n  return ex && typeof ex === 'object' && 'default' in ex ? ex['default'] : ex;\n}\nvar React = require('react');\nvar React__default = _interopDefault(React);\nvar ReactDOM = _interopDefault(require('react-dom'));\nvar invariant = _interopDefault(require('invariant'));\nvar throttleDebounce = require('throttle-debounce');\nvar createResizeDetector = _interopDefault(require('element-resize-detector'));\nvar isShallowEqual = _interopDefault(require('shallowequal'));\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n  return _setPrototypeOf(o, p);\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n  return target;\n}\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return self;\n}\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (typeof call === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n  return _assertThisInitialized(self);\n}\nvar instances = {}; // Lazily require to not cause bug\n// https://github.com/ctrlplusb/react-sizeme/issues/6\n\nfunction resizeDetector() {\n  var strategy = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'scroll';\n  if (!instances[strategy]) {\n    instances[strategy] = createResizeDetector({\n      strategy: strategy\n    });\n  }\n  return instances[strategy];\n}\nvar errMsg = 'react-sizeme: an error occurred whilst stopping to listen to node size changes';\nvar defaultConfig = {\n  monitorWidth: true,\n  monitorHeight: false,\n  monitorPosition: false,\n  refreshRate: 16,\n  refreshMode: 'throttle',\n  noPlaceholder: false,\n  resizeDetectorStrategy: 'scroll'\n};\nfunction getDisplayName(WrappedComponent) {\n  return WrappedComponent.displayName || WrappedComponent.name || 'Component';\n}\n/**\n * This is a utility wrapper component that will allow our higher order\n * component to get a ref handle on our wrapped components html.\n * @see https://gist.github.com/jimfb/32b587ee6177665fb4cf\n */\n\nvar ReferenceWrapper = /*#__PURE__*/\nfunction (_Component) {\n  _inherits(ReferenceWrapper, _Component);\n  function ReferenceWrapper() {\n    _classCallCheck(this, ReferenceWrapper);\n    return _possibleConstructorReturn(this, _getPrototypeOf(ReferenceWrapper).apply(this, arguments));\n  }\n  _createClass(ReferenceWrapper, [{\n    key: \"render\",\n    value: function render() {\n      return React.Children.only(this.props.children);\n    }\n  }]);\n  return ReferenceWrapper;\n}(React.Component);\n_defineProperty(ReferenceWrapper, \"displayName\", 'SizeMeReferenceWrapper');\nfunction Placeholder(_ref) {\n  var className = _ref.className,\n    style = _ref.style;\n  // Lets create the props for the temp element.\n  var phProps = {}; // We will use any provided className/style or else make the temp\n  // container take the full available space.\n\n  if (!className && !style) {\n    phProps.style = {\n      width: '100%',\n      height: '100%'\n    };\n  } else {\n    if (className) {\n      phProps.className = className;\n    }\n    if (style) {\n      phProps.style = style;\n    }\n  }\n  return React__default.createElement(\"div\", phProps);\n}\nPlaceholder.displayName = 'SizeMePlaceholder';\n/**\n * As we need to maintain a ref on the root node that is rendered within our\n * SizeMe component we need to wrap our entire render in a sub component.\n * Without this, we lose the DOM ref after the placeholder is removed from\n * the render and the actual component is rendered.\n * It took me forever to figure this out, so tread extra careful on this one!\n */\n\nvar renderWrapper = function renderWrapper(WrappedComponent) {\n  function SizeMeRenderer(props) {\n    var explicitRef = props.explicitRef,\n      className = props.className,\n      style = props.style,\n      size = props.size,\n      disablePlaceholder = props.disablePlaceholder,\n      onSize = props.onSize,\n      restProps = _objectWithoutProperties(props, [\"explicitRef\", \"className\", \"style\", \"size\", \"disablePlaceholder\", \"onSize\"]);\n    var noSizeData = size == null || size.width == null && size.height == null && size.position == null;\n    var renderPlaceholder = noSizeData && !disablePlaceholder;\n    var renderProps = {\n      className: className,\n      style: style\n    };\n    if (size != null) {\n      renderProps.size = size;\n    }\n    var toRender = renderPlaceholder ? React__default.createElement(Placeholder, {\n      className: className,\n      style: style\n    }) : React__default.createElement(WrappedComponent, _extends({}, renderProps, restProps));\n    return React__default.createElement(ReferenceWrapper, {\n      ref: explicitRef\n    }, toRender);\n  }\n  SizeMeRenderer.displayName = \"SizeMeRenderer(\".concat(getDisplayName(WrappedComponent), \")\");\n  return SizeMeRenderer;\n};\n/**\n * :: config -> Component -> WrappedComponent\n *\n * Higher order component that allows the wrapped component to become aware\n * of it's size, by receiving it as an object within it's props.\n *\n * @param  monitorWidth\n *   Default true, whether changes in the element's width should be monitored,\n *   causing a size property to be broadcast.\n * @param  monitorHeight\n *   Default false, whether changes in the element's height should be monitored,\n *   causing a size property to be broadcast.\n *\n * @return The wrapped component.\n */\n\nfunction withSize() {\n  var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultConfig;\n  var _config$monitorWidth = config.monitorWidth,\n    monitorWidth = _config$monitorWidth === void 0 ? defaultConfig.monitorWidth : _config$monitorWidth,\n    _config$monitorHeight = config.monitorHeight,\n    monitorHeight = _config$monitorHeight === void 0 ? defaultConfig.monitorHeight : _config$monitorHeight,\n    _config$monitorPositi = config.monitorPosition,\n    monitorPosition = _config$monitorPositi === void 0 ? defaultConfig.monitorPosition : _config$monitorPositi,\n    _config$refreshRate = config.refreshRate,\n    refreshRate = _config$refreshRate === void 0 ? defaultConfig.refreshRate : _config$refreshRate,\n    _config$refreshMode = config.refreshMode,\n    refreshMode = _config$refreshMode === void 0 ? defaultConfig.refreshMode : _config$refreshMode,\n    _config$noPlaceholder = config.noPlaceholder,\n    noPlaceholder = _config$noPlaceholder === void 0 ? defaultConfig.noPlaceholder : _config$noPlaceholder,\n    _config$resizeDetecto = config.resizeDetectorStrategy,\n    resizeDetectorStrategy = _config$resizeDetecto === void 0 ? defaultConfig.resizeDetectorStrategy : _config$resizeDetecto;\n  invariant(monitorWidth || monitorHeight || monitorPosition, 'You have to monitor at least one of the width, height, or position when using \"sizeMe\"');\n  invariant(refreshRate >= 16, \"It is highly recommended that you don't put your refreshRate lower than \" + '16 as this may cause layout thrashing.');\n  invariant(refreshMode === 'throttle' || refreshMode === 'debounce', 'The refreshMode should have a value of \"throttle\" or \"debounce\"');\n  var refreshDelayStrategy = refreshMode === 'throttle' ? throttleDebounce.throttle : throttleDebounce.debounce;\n  return function WrapComponent(WrappedComponent) {\n    var SizeMeRenderWrapper = renderWrapper(WrappedComponent);\n    var SizeAwareComponent = /*#__PURE__*/\n    function (_React$Component) {\n      _inherits(SizeAwareComponent, _React$Component);\n      function SizeAwareComponent() {\n        var _getPrototypeOf2;\n        var _this;\n        _classCallCheck(this, SizeAwareComponent);\n        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n          args[_key] = arguments[_key];\n        }\n        _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(SizeAwareComponent)).call.apply(_getPrototypeOf2, [this].concat(args)));\n        _defineProperty(_assertThisInitialized(_this), \"domEl\", null);\n        _defineProperty(_assertThisInitialized(_this), \"state\", {\n          width: undefined,\n          height: undefined,\n          position: undefined\n        });\n        _defineProperty(_assertThisInitialized(_this), \"uninstall\", function () {\n          if (_this.domEl) {\n            try {\n              _this.detector.uninstall(_this.domEl);\n            } catch (err) {\n              // eslint-disable-next-line no-console\n              console.warn(errMsg);\n            }\n            _this.domEl = null;\n          }\n        });\n        _defineProperty(_assertThisInitialized(_this), \"determineStrategy\", function (props) {\n          if (props.onSize) {\n            if (!_this.callbackState) {\n              _this.callbackState = _objectSpread2({}, _this.state);\n            }\n            _this.strategy = 'callback';\n          } else {\n            _this.strategy = 'render';\n          }\n        });\n        _defineProperty(_assertThisInitialized(_this), \"strategisedSetState\", function (state) {\n          if (_this.strategy === 'callback') {\n            _this.callbackState = state;\n            _this.props.onSize(state);\n          }\n          _this.setState(state);\n        });\n        _defineProperty(_assertThisInitialized(_this), \"strategisedGetState\", function () {\n          return _this.strategy === 'callback' ? _this.callbackState : _this.state;\n        });\n        _defineProperty(_assertThisInitialized(_this), \"refCallback\", function (element) {\n          _this.element = element;\n        });\n        _defineProperty(_assertThisInitialized(_this), \"hasSizeChanged\", function (current, next) {\n          var c = current;\n          var n = next;\n          var cp = c.position || {};\n          var np = n.position || {};\n          return monitorWidth && c.width !== n.width || monitorHeight && c.height !== n.height || monitorPosition && (cp.top !== np.top || cp.left !== np.left || cp.bottom !== np.bottom || cp.right !== np.right);\n        });\n        _defineProperty(_assertThisInitialized(_this), \"checkIfSizeChanged\", refreshDelayStrategy(refreshRate, function (el) {\n          var _el$getBoundingClient = el.getBoundingClientRect(),\n            width = _el$getBoundingClient.width,\n            height = _el$getBoundingClient.height,\n            right = _el$getBoundingClient.right,\n            left = _el$getBoundingClient.left,\n            top = _el$getBoundingClient.top,\n            bottom = _el$getBoundingClient.bottom;\n          var next = {\n            width: monitorWidth ? width : null,\n            height: monitorHeight ? height : null,\n            position: monitorPosition ? {\n              right: right,\n              left: left,\n              top: top,\n              bottom: bottom\n            } : null\n          };\n          if (_this.hasSizeChanged(_this.strategisedGetState(), next)) {\n            _this.strategisedSetState(next);\n          }\n        }));\n        return _this;\n      }\n      _createClass(SizeAwareComponent, [{\n        key: \"componentDidMount\",\n        value: function componentDidMount() {\n          this.detector = resizeDetector(resizeDetectorStrategy);\n          this.determineStrategy(this.props);\n          this.handleDOMNode();\n        }\n      }, {\n        key: \"componentDidUpdate\",\n        value: function componentDidUpdate() {\n          this.determineStrategy(this.props);\n          this.handleDOMNode();\n        }\n      }, {\n        key: \"componentWillUnmount\",\n        value: function componentWillUnmount() {\n          // Change our size checker to a noop just in case we have some\n          // late running events.\n          this.hasSizeChanged = function () {\n            return undefined;\n          };\n          this.checkIfSizeChanged = function () {\n            return undefined;\n          };\n          this.uninstall();\n        }\n      }, {\n        key: \"handleDOMNode\",\n        value: function handleDOMNode() {\n          var found = this.element && ReactDOM.findDOMNode(this.element);\n          if (!found) {\n            // If we previously had a dom node then we need to ensure that\n            // we remove any existing listeners to avoid memory leaks.\n            this.uninstall();\n            return;\n          }\n          if (!this.domEl) {\n            this.domEl = found;\n            this.detector.listenTo(this.domEl, this.checkIfSizeChanged);\n          } else if (this.domEl.isSameNode && !this.domEl.isSameNode(found) || this.domEl !== found) {\n            this.uninstall();\n            this.domEl = found;\n            this.detector.listenTo(this.domEl, this.checkIfSizeChanged);\n          }\n        }\n      }, {\n        key: \"render\",\n        value: function render() {\n          var disablePlaceholder = withSize.enableSSRBehaviour || withSize.noPlaceholders || noPlaceholder || this.strategy === 'callback';\n          var size = _objectSpread2({}, this.state);\n          return React__default.createElement(SizeMeRenderWrapper, _extends({\n            explicitRef: this.refCallback,\n            size: this.strategy === 'callback' ? null : size,\n            disablePlaceholder: disablePlaceholder\n          }, this.props));\n        }\n      }]);\n      return SizeAwareComponent;\n    }(React__default.Component);\n    _defineProperty(SizeAwareComponent, \"displayName\", \"SizeMe(\".concat(getDisplayName(WrappedComponent), \")\"));\n    SizeAwareComponent.WrappedComponent = WrappedComponent;\n    return SizeAwareComponent;\n  };\n}\n/**\n * Allow SizeMe to run within SSR environments.  This is a \"global\" behaviour\n * flag that should be set within the initialisation phase of your application.\n *\n * Warning: don't set this flag unless you need to as using it may cause\n * extra render cycles to happen within your components depending on the logic\n * contained within them around the usage of the `size` data.\n *\n * DEPRECATED: Please use the global noPlaceholders\n */\n\nwithSize.enableSSRBehaviour = false;\n/**\n * Global configuration allowing to disable placeholder rendering for all\n * sizeMe components.\n */\n\nwithSize.noPlaceholders = false;\nvar SizeMe = /*#__PURE__*/\nfunction (_Component) {\n  _inherits(SizeMe, _Component);\n  function SizeMe(props) {\n    var _this;\n    _classCallCheck(this, SizeMe);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(SizeMe).call(this, props));\n    _defineProperty(_assertThisInitialized(_this), \"createComponent\", function (config) {\n      _this.SizeAware = withSize(config)(function (_ref) {\n        var children = _ref.children;\n        return children;\n      });\n    });\n    _defineProperty(_assertThisInitialized(_this), \"onSize\", function (size) {\n      return _this.setState({\n        size: size\n      });\n    });\n    var _children = props.children,\n      render = props.render,\n      sizeMeConfig = _objectWithoutProperties(props, [\"children\", \"render\"]);\n    _this.createComponent(sizeMeConfig);\n    _this.state = {\n      size: {\n        width: undefined,\n        height: undefined\n      }\n    };\n    return _this;\n  }\n  _createClass(SizeMe, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var _this$props = this.props,\n        prevChildren = _this$props.children,\n        prevRender = _this$props.render,\n        currentSizeMeConfig = _objectWithoutProperties(_this$props, [\"children\", \"render\"]);\n      var nextChildren = prevProps.children,\n        nextRender = prevProps.render,\n        prevSizeMeConfig = _objectWithoutProperties(prevProps, [\"children\", \"render\"]);\n      if (!isShallowEqual(currentSizeMeConfig, prevSizeMeConfig)) {\n        this.createComponent(currentSizeMeConfig);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var SizeAware = this.SizeAware;\n      var render = this.props.children || this.props.render;\n      return React__default.createElement(SizeAware, {\n        onSize: this.onSize\n      }, render({\n        size: this.state.size\n      }));\n    }\n  }]);\n  return SizeMe;\n}(React.Component);\n_defineProperty(SizeMe, \"defaultProps\", {\n  children: undefined,\n  render: undefined\n});\nwithSize.SizeMe = SizeMe;\nwithSize.withSize = withSize;\nmodule.exports = withSize;","map":{"version":3,"names":["instances","resizeDetector","strategy","arguments","length","undefined","createResizeDetector","errMsg","defaultConfig","monitorWidth","monitorHeight","monitorPosition","refreshRate","refreshMode","noPlaceholder","resizeDetectorStrategy","getDisplayName","WrappedComponent","displayName","name","ReferenceWrapper","React","Children","only","props","children","Component","Placeholder","_ref","className","style","phProps","width","height","React__default","createElement","renderWrapper","SizeMeRenderer","explicitRef","size","disablePlaceholder","onSize","restProps","_objectWithoutProperties","noSizeData","position","renderPlaceholder","renderProps","toRender","_extends","ref","concat","withSize","config","_config$monitorWidth","_config$monitorHeight","_config$monitorPositi","_config$refreshRate","_config$refreshMode","_config$noPlaceholder","_config$resizeDetecto","invariant","refreshDelayStrategy","throttleDebounce","throttle","debounce","WrapComponent","SizeMeRenderWrapper","SizeAwareComponent","_React$Component","_inherits","_getPrototypeOf2","_this","_classCallCheck","_len","args","Array","_key","_possibleConstructorReturn","_getPrototypeOf","call","apply","_defineProperty","_assertThisInitialized","domEl","detector","uninstall","err","console","warn","callbackState","_objectSpread2","state","setState","element","current","next","c","n","cp","np","top","left","bottom","right","el","_el$getBoundingClient","getBoundingClientRect","hasSizeChanged","strategisedGetState","strategisedSetState","_createClass","key","value","componentDidMount","determineStrategy","handleDOMNode","componentDidUpdate","componentWillUnmount","checkIfSizeChanged","found","ReactDOM","findDOMNode","listenTo","isSameNode","render","enableSSRBehaviour","noPlaceholders","refCallback","SizeMe","SizeAware","_children","sizeMeConfig","createComponent","prevProps","_this$props","prevChildren","prevRender","currentSizeMeConfig","nextChildren","nextRender","prevSizeMeConfig","isShallowEqual"],"sources":["/home/harishnigam/Documents/react-reduction/node_modules/react-sizeme/src/resize-detector.js","/home/harishnigam/Documents/react-reduction/node_modules/react-sizeme/src/with-size.js","/home/harishnigam/Documents/react-reduction/node_modules/react-sizeme/src/component.js","/home/harishnigam/Documents/react-reduction/node_modules/react-sizeme/src/index.js"],"sourcesContent":["import createResizeDetector from 'element-resize-detector'\n\nconst instances = {}\n\n// Lazily require to not cause bug\n// https://github.com/ctrlplusb/react-sizeme/issues/6\nfunction resizeDetector(strategy = 'scroll') {\n  if (!instances[strategy]) {\n    instances[strategy] = createResizeDetector({\n      strategy,\n    })\n  }\n\n  return instances[strategy]\n}\n\nexport default resizeDetector\n","/* eslint-disable react/no-multi-comp */\n/* eslint-disable react/prop-types */\n/* eslint-disable react/require-default-props */\n/* eslint-disable react/no-find-dom-node */\n\nimport React, { Children, Component } from 'react'\nimport ReactDOM from 'react-dom'\nimport invariant from 'invariant'\nimport { debounce, throttle } from 'throttle-debounce'\nimport resizeDetector from './resize-detector'\n\nconst errMsg =\n  'react-sizeme: an error occurred whilst stopping to listen to node size changes'\n\nconst defaultConfig = {\n  monitorWidth: true,\n  monitorHeight: false,\n  monitorPosition: false,\n  refreshRate: 16,\n  refreshMode: 'throttle',\n  noPlaceholder: false,\n  resizeDetectorStrategy: 'scroll',\n}\n\nfunction getDisplayName(WrappedComponent) {\n  return WrappedComponent.displayName || WrappedComponent.name || 'Component'\n}\n\n/**\n * This is a utility wrapper component that will allow our higher order\n * component to get a ref handle on our wrapped components html.\n * @see https://gist.github.com/jimfb/32b587ee6177665fb4cf\n */\nclass ReferenceWrapper extends Component {\n  static displayName = 'SizeMeReferenceWrapper'\n\n  render() {\n    return Children.only(this.props.children)\n  }\n}\n\nfunction Placeholder({ className, style }) {\n  // Lets create the props for the temp element.\n  const phProps = {}\n\n  // We will use any provided className/style or else make the temp\n  // container take the full available space.\n  if (!className && !style) {\n    phProps.style = { width: '100%', height: '100%' }\n  } else {\n    if (className) {\n      phProps.className = className\n    }\n    if (style) {\n      phProps.style = style\n    }\n  }\n\n  return <div {...phProps} />\n}\nPlaceholder.displayName = 'SizeMePlaceholder'\n\n/**\n * As we need to maintain a ref on the root node that is rendered within our\n * SizeMe component we need to wrap our entire render in a sub component.\n * Without this, we lose the DOM ref after the placeholder is removed from\n * the render and the actual component is rendered.\n * It took me forever to figure this out, so tread extra careful on this one!\n */\nconst renderWrapper = WrappedComponent => {\n  function SizeMeRenderer(props) {\n    const {\n      explicitRef,\n      className,\n      style,\n      size,\n      disablePlaceholder,\n      onSize,\n      ...restProps\n    } = props\n\n    const noSizeData =\n      size == null ||\n      (size.width == null && size.height == null && size.position == null)\n\n    const renderPlaceholder = noSizeData && !disablePlaceholder\n\n    const renderProps = {\n      className,\n      style,\n    }\n\n    if (size != null) {\n      renderProps.size = size\n    }\n\n    const toRender = renderPlaceholder ? (\n      <Placeholder className={className} style={style} />\n    ) : (\n      <WrappedComponent {...renderProps} {...restProps} />\n    )\n\n    return <ReferenceWrapper ref={explicitRef}>{toRender}</ReferenceWrapper>\n  }\n\n  SizeMeRenderer.displayName = `SizeMeRenderer(${getDisplayName(\n    WrappedComponent,\n  )})`\n\n  return SizeMeRenderer\n}\n\n/**\n * :: config -> Component -> WrappedComponent\n *\n * Higher order component that allows the wrapped component to become aware\n * of it's size, by receiving it as an object within it's props.\n *\n * @param  monitorWidth\n *   Default true, whether changes in the element's width should be monitored,\n *   causing a size property to be broadcast.\n * @param  monitorHeight\n *   Default false, whether changes in the element's height should be monitored,\n *   causing a size property to be broadcast.\n *\n * @return The wrapped component.\n */\nfunction withSize(config = defaultConfig) {\n  const {\n    monitorWidth = defaultConfig.monitorWidth,\n    monitorHeight = defaultConfig.monitorHeight,\n    monitorPosition = defaultConfig.monitorPosition,\n    refreshRate = defaultConfig.refreshRate,\n    refreshMode = defaultConfig.refreshMode,\n    noPlaceholder = defaultConfig.noPlaceholder,\n    resizeDetectorStrategy = defaultConfig.resizeDetectorStrategy,\n  } = config\n\n  invariant(\n    monitorWidth || monitorHeight || monitorPosition,\n    'You have to monitor at least one of the width, height, or position when using \"sizeMe\"',\n  )\n\n  invariant(\n    refreshRate >= 16,\n    \"It is highly recommended that you don't put your refreshRate lower than \" +\n      '16 as this may cause layout thrashing.',\n  )\n\n  invariant(\n    refreshMode === 'throttle' || refreshMode === 'debounce',\n    'The refreshMode should have a value of \"throttle\" or \"debounce\"',\n  )\n\n  const refreshDelayStrategy = refreshMode === 'throttle' ? throttle : debounce\n\n  return function WrapComponent(WrappedComponent) {\n    const SizeMeRenderWrapper = renderWrapper(WrappedComponent)\n\n    class SizeAwareComponent extends React.Component {\n      static displayName = `SizeMe(${getDisplayName(WrappedComponent)})`\n\n      domEl = null\n\n      state = {\n        width: undefined,\n        height: undefined,\n        position: undefined,\n      }\n\n      componentDidMount() {\n        this.detector = resizeDetector(resizeDetectorStrategy)\n        this.determineStrategy(this.props)\n        this.handleDOMNode()\n      }\n\n      componentDidUpdate() {\n        this.determineStrategy(this.props)\n        this.handleDOMNode()\n      }\n\n      componentWillUnmount() {\n        // Change our size checker to a noop just in case we have some\n        // late running events.\n        this.hasSizeChanged = () => undefined\n        this.checkIfSizeChanged = () => undefined\n        this.uninstall()\n      }\n\n      uninstall = () => {\n        if (this.domEl) {\n          try {\n            this.detector.uninstall(this.domEl)\n          } catch (err) {\n            // eslint-disable-next-line no-console\n            console.warn(errMsg)\n          }\n          this.domEl = null\n        }\n      }\n\n      determineStrategy = props => {\n        if (props.onSize) {\n          if (!this.callbackState) {\n            this.callbackState = {\n              ...this.state,\n            }\n          }\n          this.strategy = 'callback'\n        } else {\n          this.strategy = 'render'\n        }\n      }\n\n      strategisedSetState = state => {\n        if (this.strategy === 'callback') {\n          this.callbackState = state\n          this.props.onSize(state)\n        }\n        this.setState(state)\n      }\n\n      strategisedGetState = () =>\n        this.strategy === 'callback' ? this.callbackState : this.state\n\n      handleDOMNode() {\n        const found = this.element && ReactDOM.findDOMNode(this.element)\n\n        if (!found) {\n          // If we previously had a dom node then we need to ensure that\n          // we remove any existing listeners to avoid memory leaks.\n          this.uninstall()\n          return\n        }\n\n        if (!this.domEl) {\n          this.domEl = found\n          this.detector.listenTo(this.domEl, this.checkIfSizeChanged)\n        } else if (\n          (this.domEl.isSameNode && !this.domEl.isSameNode(found)) ||\n          this.domEl !== found\n        ) {\n          this.uninstall()\n          this.domEl = found\n          this.detector.listenTo(this.domEl, this.checkIfSizeChanged)\n        } else {\n          // Do nothing 👍\n        }\n      }\n\n      refCallback = element => {\n        this.element = element\n      }\n\n      hasSizeChanged = (current, next) => {\n        const c = current\n        const n = next\n        const cp = c.position || {}\n        const np = n.position || {}\n\n        return (\n          (monitorWidth && c.width !== n.width) ||\n          (monitorHeight && c.height !== n.height) ||\n          (monitorPosition &&\n            (cp.top !== np.top ||\n              cp.left !== np.left ||\n              cp.bottom !== np.bottom ||\n              cp.right !== np.right))\n        )\n      }\n\n      checkIfSizeChanged = refreshDelayStrategy(refreshRate, el => {\n        const {\n          width,\n          height,\n          right,\n          left,\n          top,\n          bottom,\n        } = el.getBoundingClientRect()\n\n        const next = {\n          width: monitorWidth ? width : null,\n          height: monitorHeight ? height : null,\n          position: monitorPosition ? { right, left, top, bottom } : null,\n        }\n\n        if (this.hasSizeChanged(this.strategisedGetState(), next)) {\n          this.strategisedSetState(next)\n        }\n      })\n\n      render() {\n        const disablePlaceholder =\n          withSize.enableSSRBehaviour ||\n          withSize.noPlaceholders ||\n          noPlaceholder ||\n          this.strategy === 'callback'\n\n        const size = { ...this.state }\n\n        return (\n          <SizeMeRenderWrapper\n            explicitRef={this.refCallback}\n            size={this.strategy === 'callback' ? null : size}\n            disablePlaceholder={disablePlaceholder}\n            {...this.props}\n          />\n        )\n      }\n    }\n\n    SizeAwareComponent.WrappedComponent = WrappedComponent\n\n    return SizeAwareComponent\n  }\n}\n\n/**\n * Allow SizeMe to run within SSR environments.  This is a \"global\" behaviour\n * flag that should be set within the initialisation phase of your application.\n *\n * Warning: don't set this flag unless you need to as using it may cause\n * extra render cycles to happen within your components depending on the logic\n * contained within them around the usage of the `size` data.\n *\n * DEPRECATED: Please use the global noPlaceholders\n */\nwithSize.enableSSRBehaviour = false\n\n/**\n * Global configuration allowing to disable placeholder rendering for all\n * sizeMe components.\n */\nwithSize.noPlaceholders = false\n\nexport default withSize\n","/* eslint-disable react/prop-types */\n\nimport React, { Component } from 'react'\nimport isShallowEqual from 'shallowequal'\nimport withSize from './with-size'\n\nexport default class SizeMe extends Component {\n  static defaultProps = {\n    children: undefined,\n    render: undefined,\n  }\n\n  constructor(props) {\n    super(props)\n    const { children, render, ...sizeMeConfig } = props\n    this.createComponent(sizeMeConfig)\n    this.state = {\n      size: {\n        width: undefined,\n        height: undefined,\n      },\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    const {\n      children: prevChildren,\n      render: prevRender,\n      ...currentSizeMeConfig\n    } = this.props\n    const {\n      children: nextChildren,\n      render: nextRender,\n      ...prevSizeMeConfig\n    } = prevProps\n    if (!isShallowEqual(currentSizeMeConfig, prevSizeMeConfig)) {\n      this.createComponent(currentSizeMeConfig)\n    }\n  }\n\n  createComponent = config => {\n    this.SizeAware = withSize(config)(({ children }) => children)\n  }\n\n  onSize = size => this.setState({ size })\n\n  render() {\n    const { SizeAware } = this\n    const render = this.props.children || this.props.render\n    return (\n      <SizeAware onSize={this.onSize}>\n        {render({ size: this.state.size })}\n      </SizeAware>\n    )\n  }\n}\n","import withSize from './with-size'\nimport SizeMe from './component'\n\nwithSize.SizeMe = SizeMe\nwithSize.withSize = withSize\n\nexport default withSize\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}